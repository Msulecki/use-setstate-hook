{"version":3,"sources":["App.js","hooks/useSetState.js","index.js"],"names":["App","initialState","id","firstName","secondName","useState","input","setInput","mergedState","setMergedStates","setState","next","prev","useSetState","state","error","setError","keys","Object","object","map","key","className","JSON","stringify","onChange","e","target","value","type","placeholder","onClick","parsedInput","parse","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQA8CeA,MA1Cf,WAEE,IAAMC,EAAe,CACnBC,GAAI,EACJC,UAAW,OACXC,WAAY,OALD,EAQaC,mBAAS,IARtB,mBAQNC,EARM,KAQCC,EARD,OCFY,WAAwB,IAAvBN,EAAsB,uDAAP,GAAO,EACPI,mBAASJ,GADF,mBACvCO,EADuC,KAC1BC,EAD0B,KAExCC,EAAW,SAAAC,GACbF,GAAgB,SAAAG,GAAI,kCACbA,GACAD,OAGX,MAAO,CAACH,EAAaE,GDGGG,CAAYZ,GATzB,mBASNa,EATM,KASCJ,EATD,OAUaL,mBAAS,IAVtB,mBAUNU,EAVM,KAUCC,EAVD,KAYPC,EAAOC,OAAOD,KAAKH,GACnBK,EAAS,4BAAKF,EAAKG,KAAI,SAAAC,GAAG,OAAI,wBAAIA,IAAKA,GAAT,UAAkBA,EAAlB,aAA0BP,EAAMO,SAcpE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,aACb,2CACA,yBAAKA,UAAU,iBAAiBH,GAChC,8BAAM,mDAAiCI,KAAKC,UAAUvB,KAExD,2BAAOwB,SAAU,SAAAC,GAAC,OAAInB,EAASmB,EAAEC,OAAOC,QAAQC,KAAK,OAAOC,YAAY,qCAAqCF,MAAOtB,IACpH,4BAAQyB,QArBO,WACnB,IACE,IAAMC,EAAcT,KAAKU,MAAM3B,GAC/BI,EAASsB,GACTzB,EAAS,IACTQ,GAASC,EAAS,IAEpB,MAAOD,GACLC,EAASD,EAAMmB,SAab,UACCnB,GAAS,yBAAKO,UAAU,cAAcP,MEpC/CoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.55f66850.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useSetState } from './hooks/useSetState';\nimport './App.scss';\n\nfunction App() {\n\n  const initialState = {\n    id: 0,\n    firstName: \"John\",\n    secondName: \"Doe\"\n  }\n\n  const [input, setInput] = useState(\"\");\n  const [state, setState] = useSetState(initialState);\n  const [error, setError] = useState(\"\");\n\n  const keys = Object.keys(state);\n  const object = <ul>{keys.map(key => <li key={key}>{`${key}: ${state[key]}`}</li>)}</ul>\n\n  const handleUpdate = () => {\n    try {\n      const parsedInput = JSON.parse(input);\n      setState(parsedInput);\n      setInput(\"\");\n      error && setError(\"\");\n    }\n    catch (error) {\n      setError(error.name);\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_box\">\n        <div className=\"app__hook\">\n          <h1>Hook value:</h1>\n          <div className=\"app__hook-val\">{object}</div>\n          <span><strong>Input example: </strong>{JSON.stringify(initialState)}</span>\n        </div>\n        <input onChange={e => setInput(e.target.value)} type=\"text\" placeholder=\"enter new value (stringified JSON)\" value={input} />\n        <button onClick={handleUpdate}>Update</button>\n        {error && <div className=\"app__error\">{error}</div>}\n      </div>\n    </div>\n  );\n}\nexport default App;","import { useState } from 'react';\r\n\r\nexport const useSetState = (initialState = {}) => {\r\n    const [mergedState, setMergedStates] = useState(initialState);\r\n    const setState = next => {\r\n        setMergedStates(prev => ({\r\n            ...prev,\r\n            ...next\r\n        }));\r\n    };\r\n    return [mergedState, setState];\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}